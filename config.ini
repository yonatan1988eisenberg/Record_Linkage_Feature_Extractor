[const]
source_list = viator,tiqets,musement,google
log_format = %(levelname)s-%(asctime)s-FUNC:%(funcName)s-LINE:%(lineno)d-%(message)s
data_path_prefix = C:\Users\Yonatan\Bridgify_Internship/Data/
supported_algorithms = jaro jarowinkler levenshtein damerau_levenshtein qgram cosine smith_waterman lcs

[params]
description = This programs calculates the features or row pairs. It's input is the name of the city and its output is
              a csv file containing the features as calculated using record linkage technique. From the city name
              the program finds the path to a folder containing csv files. After the csv files are concatenated to
              a raw dataframe it's rows are sorted by the columns indicated in the 'sort_cols' parameter and rows
              with duplicated values in the columns indicated by the 'drop_cols' parameter are removed, keeping only
              the first row. Then, the program follows a standard record linkage process; preprocessing, indexing,
              comparing and computing, to build a dataset of two row's indexes and their features.

city_help = The name of the city. The program search for csv files in the path 'user/Data/<city>' where spaces are replaced with '_'.

remove_duplicates_help = A boolean indicating if to delete duplicates, Default is False.

sort_cols = number_of_reviews
sort_cols_help = Comma separated names of column(s) to sort the raw data by before removing duplicates (the order matters), only the
                 first row of each duplicates set will be kept. Default is 'number_or_reviews'.

drop_cols = name
drop_cols_help = Space separated names of column(s) to find duplicates by. Default is 'name'.

index_by = Full:None
index_by_help = Space separated method:column(s) pairs indicating the indexing method ('Full', 'Block',
                'SortedNeighbourhood' or 'Random') and the appropriate column(s) if required. To use the same method on
                 multiple columns separate them with commas (ex: 'Block:col1,col2 Full:None'). Default is 'Full:None'.

compare_by = name:jarowinkler,damerau_levenshtein,cosine,smith_waterman address:jarowinkler,damerau_levenshtein,cosine,smith_waterman about:jarowinkler,cosine,smith_waterman
compare_by_help = space separated column:algorithms pair indicating the algorithms used to compare each column. Use similar
                  as in the 'index_by' parameter. Default is 'name:jarowinkler,damerau_levenshtein,cosine,smith_waterman
                    address:jarowinkler,damerau_levenshtein,cosine,smith_waterman about:jarowinkler,cosine,smith_waterman'

# remove what's below here
compare_cols = name address about
compare_cols_help = Comma separated names of column(s) to compare two rows by. Default is 'name address about'.

algos = jaro jarowinkler levenshtein damerau_levenshtein qgram cosine smith_waterman lcs
algos_help = Comma separated names of algorithms to use in the feature compering stage. Default is 'jaro jarowinkler
             levenshtein damerau_levenshtein qgram cosine smith_waterman lcs'.
